/*******************************************************************************
 * Copyright (c) 2014, 2016 IncQuery Labs Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Akos Horvath, Abel Hegedus, Akos Menyhert, Zoltan Ujhelyi - initial API and implementation
 *******************************************************************************/
package org.eclipse.viatra.examples.cps.generator.queries

import "http://org.eclipse.viatra/model/cps"

pattern Transitions(t : Transition, SM : StateMachine) {
	StateMachine.states.outgoingTransitions(SM, t);
}

pattern ReachableAppTypes(From : ApplicationType, To : ApplicationType) {
	ApplicationType.instances.allocatedTo.communicateWith.applications.type(From, To);
}

pattern AppTypesOfTransition(T : Transition, P : ApplicationType) {
	ApplicationType.behavior.states.outgoingTransitions(P, T);
}

pattern ReceiverTransition(AppTypeId, Transition : Transition, SM : StateMachine){
	ApplicationType.identifier(AppType, AppTypeId);
	ApplicationType.behavior(AppType, SM);
	StateMachine.states.outgoingTransitions(SM, Transition);
	neg find TransitionWithAction(Transition);
}

pattern PossibleReceiverType(Sender : Transition, ReceiverAppTypeId){
	HostInstance.communicateWith(HSrc, HDst);
	find TransitionOnAHost(HSrc,Sender,_);
	find TransitionOnAHost(HDst,Receiver, ReceiverAppTypeId);
	Sender != Receiver;
	HSrc != HDst; 
}

pattern TransitionOnAHost(H : HostInstance, T : Transition, AppTypeId){
	StateMachine.states.outgoingTransitions(SM,T);
	HostInstance.applications(H,App);
	ApplicationInstance.type(App,AppType);
	ApplicationType.identifier(AppType,AppTypeId);
	ApplicationType.behavior(AppType,SM);
	StateMachine.states.outgoingTransitions(SM,T);
}


pattern TransitionWithoutAction(t:Transition){
	neg find TransitionWithAction(t);
}
pattern TransitionWithAction(t:Transition){
	Transition.action(t,_action);
}
