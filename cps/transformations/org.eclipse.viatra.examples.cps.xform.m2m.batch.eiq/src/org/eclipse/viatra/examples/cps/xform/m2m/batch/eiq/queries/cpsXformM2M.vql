/*******************************************************************************
 * Copyright (c) 2014, 2016 IncQuery Labs Ltd.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Akos Horvath, Abel Hegedus, Tamas Borbas, Marton Bur, Zoltan Ujhelyi, Robert Doczi - initial API and implementation
 *******************************************************************************/
package org.eclipse.viatra.examples.cps.xform.m2m.batch.eiq.queries

import "http://org.eclipse.viatra/model/cps"
import "http://org.eclipse.viatra/model/deployment"
import "http://org.eclipse.viatra/model/cps-traceability"
import java org.eclipse.viatra.examples.cps.xform.m2m.util.SignalUtil

pattern hostInstances(hostType, hostInstance) {
	HostType.instances(hostType, hostInstance);
}

pattern cps2depTrace(cps2dep, trace, cpsElement, depElement) {
	CPSToDeployment.traces(cps2dep, trace);
	CPS2DeploymentTrace.cpsElements(trace, cpsElement);
	CPS2DeploymentTrace.deploymentElements(trace, depElement);
}

pattern cps2depApplicationTrace(cps2dep, trace, cpsAppInstance, depApp) {
	find cps2depTrace(cps2dep, trace, cpsAppInstance, depApp);
	ApplicationInstance(cpsAppInstance);
}

pattern cpsBehaviorTrace(cpsBeh, trace) {
	find cps2depTrace(_, trace, cpsBeh, _);
	StateMachine(cpsBeh);
}

pattern depTransition(depTransition) {
	BehaviorTransition(depTransition);
}

pattern stateMachineTransitions(cpsBeh, trans) {
	StateMachine.states(cpsBeh, state);
	State.outgoingTransitions(state, trans);
}

pattern applicationInstance(appType, appInstance, host) {
	ApplicationType.instances(appType, appInstance);
	ApplicationInstance.allocatedTo(appInstance, host);
}

pattern transitionAction(transition, appType, action) {
	State.outgoingTransitions(state, transition);
	StateMachine.states(sm, state);
	ApplicationType.behavior(appType, sm);
	Transition.action(transition, action);
}

pattern cpsApplicationTransition(cpsApp : ApplicationInstance, cpsTransition : Transition) {
	find cps2depTrace(_, _, cpsTransition, depTransition);
	DeploymentApplication.behavior.transitions(depApp, depTransition);
	find cps2depTrace(_, _, cpsApp, depApp);
}

pattern sendTransitionAppSignal(transition, app, signal) {
 	Transition.action(transition, action);
 	app == eval(SignalUtil.getAppId(action));
 	signal == eval(SignalUtil.getSignalId(action));
}

pattern waitTransitionAppSignal(transition, appType, signal) {
 	ApplicationType.behavior(appType, stateMachine);
	StateMachine.states(stateMachine, source);
	State.outgoingTransitions(source, transition);
 	Transition.action(transition, action);
 	check(
 		SignalUtil.isWait(action)
 	);
 	signal == eval(SignalUtil.getSignalId(action));
}

pattern triggerPair(cpsTrigger, cpsTarget) {
	find sendTransitionAppSignal(cpsTrigger, appId, signal);
	find waitTransitionAppSignal(cpsTarget, waitApp, signal);
	ApplicationType.identifier(waitApp, appId);
}

pattern communicatingAppInstances(sourceAppInstance, targetAppInstance) {
	find applicationInstance(_, sourceAppInstance, sourceHostInstance);
	find applicationInstance(_, targetAppInstance, targetHostInstance);
	find reachableHosts(sourceHostInstance, targetHostInstance);
}

pattern hostCommunication(fromHost, toHost) {
	HostInstance.communicateWith(fromHost, toHost);
}

pattern reachableHosts(source, target) {
	find hostCommunication(source, target);
} or {
	HostInstance(source);
	HostInstance(target);
	source == target;
}